(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{180:function(t,a,e){"use strict";e.r(a);var r=e(0),i=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"使用-nativescript-vue-建立一個簡單的安卓應用程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-nativescript-vue-建立一個簡單的安卓應用程序","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用 Nativescript + Vue 建立一個簡單的安卓應用程序")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://d2odgkulk9w7if.cloudfront.net/images/default-source/default-album/logo.png?sfvrsn=a9520ffe_0",alt:""}})]),t._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("Nativescript 是近幾年崛起的一個專為開發行動裝置 UI 介面的框架. 和 Ionic 一樣, 原本也是綁定 angular 和 typesript, 也因為抵擋不住 Vue 的潮流, 最近也鬆開綁定, 可以用不同的 javascript 框架搭配 Nativescript 使用. 和 Ionic 不同的地方, Nativescript 組件是 android / ios 的原生組件, 而 ionic 則是 web 組件. 這是最大的差別, 不過隨著行動裝置硬體越來越強大, 原生和混種的界線也越來越模糊了. 能夠使用網頁技術打造出原生應用程序也是個挺好的經驗. 能夠用 vue 來驅動不同的 UI 框架是件很有意思的事情, 從不同的 UI 框架中可以學習到不同的設計及使用者體驗, 是一件很棒的事情.")]),t._v(" "),e("blockquote",[e("p",[t._v("Truly native apps using Vue.js and NativeScript")])]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"建立專案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#建立專案","aria-hidden":"true"}},[t._v("#")]),t._v(" 建立專案")]),t._v(" "),e("p",[t._v('想要學習技術最好的方式就是看官網文件, 現在的 Document 都寫得很詳細, Angular, React, React Native, Vue, Vuetif, Vue-Cli,Nuxt, Bootstrap, Webpack 等等技術的教學說明文件都寫得非常清楚詳細, 範例也讓人看了一目了然. 所以自然而然壓縮了紙本書籍的空間. 前一陣子還特地去誠品書局, 發現書架上網頁技術類的書籍許多都落後現在 2 ~ 3 年, 所以真的沒有必要買書學技術了. 線上的教學影片及靜態的文件早就已經變成主流了. 紙本書籍正面臨嚴重的挑戰, 而且我認為最終會被消滅, 螢幕取而代之. 這讓我想到了前一陣子看過的一本書 - "必然 - 掌握形塑未來 30 年的 12 科技大趨力", 內容敘述不遠的未來所有的諮詢都儲存在雲端, 螢幕成為人類獲取資訊的唯一介面. 而這個現象正在發生.')]),t._v(" "),e("h3",{attrs:{id:"步驟"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#步驟","aria-hidden":"true"}},[t._v("#")]),t._v(" 步驟 :")])])}],!1,null,null,null);a.default=i.exports}}]);